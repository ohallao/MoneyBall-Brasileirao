# -*- coding: utf-8 -*-
"""streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I-158ZrEZIjTJT0qAhrM5lmP1HHQyfVa
"""

import streamlit as st
import pandas as pd
import numpy as np

# Função para normalizar uma métrica com base no valor máximo
def normalizar(coluna):
    return coluna / coluna.max()

# Configuração inicial do Streamlit
st.title("Sistema de Ranqueamento de Jogadores")

# Upload do arquivo CSV
st.sidebar.header("Upload do Arquivo")
uploaded_file = st.sidebar.file_uploader("Carregar arquivo CSV", type=["csv"])

if uploaded_file is not None:
    # Leitura do arquivo CSV
    striker = pd.read_csv(uploaded_file)

    st.write("### Dados do Arquivo")
    st.write(striker.head())

    # Configuração dos pesos para as métricas
    pesos = {
        'PrgR': 4,
        'xG': 5,
        'xAG': 4,
        'G-PK': 10.0,
        'Assistencias': 3,
        'Acoes Ofensivas': 2,
        'Aerial Duel%': 2
    }

    # Normalizando métricas específicas
    striker['Acoes Ofensivas'] = normalizar(striker['Acoes Ofensivas']) * 100
    striker['Aerial Duel%'] = normalizar(striker['Aerial Duel%']) * 100

    # Calculando as pontuações individuais para cada métrica
    for coluna, peso in pesos.items():
        striker[coluna + '_Pontuacao'] = striker[coluna] * peso

    # Calculando a pontuação total
    colunas_pontuacao = [coluna + '_Pontuacao' for coluna in pesos.keys()]
    striker['Pontuacao_Total'] = striker[colunas_pontuacao].sum(axis=1)

    # Normalizando a pontuação total no intervalo [0, 100]
    min_pontuacao = striker['Pontuacao_Total'].min()
    max_pontuacao = striker['Pontuacao_Total'].max()
    striker['Pontuacao'] = (
        (striker['Pontuacao_Total'] - min_pontuacao) / (max_pontuacao - min_pontuacao)
    ) * 100

    # Sistema de ranqueamento por perfil
    st.sidebar.header("Configuração do Perfil")
    perfil_escolhido = st.sidebar.selectbox(
        "Escolha um perfil", options=striker['Perfil'].unique()
    )

    jogadores_filtrados = striker[striker['Perfil'] == perfil_escolhido]
    jogadores_ordenados = jogadores_filtrados.sort_values(by='Pontuacao', ascending=False)

    jogadores_ordenados['Ranking'] = range(1, len(jogadores_ordenados) + 1)

    # Selecionando colunas desejadas para exibição
    resultado_final = jogadores_ordenados[
        ['Ranking', 'time', 'posicao', 'jogador', 'Perfil', 'Pontuacao']
    ]

    # Exibindo o ranking final
    st.write(f"### Ranking de jogadores no perfil: {perfil_escolhido}")
    st.write(resultado_final)

    # Baixar resultados como CSV
    csv = resultado_final.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="Baixar ranking como CSV",
        data=csv,
        file_name='ranking_jogadores.csv',
        mime='text/csv',
    )
else:
    st.write("Por favor, carregue um arquivo CSV na barra lateral.")